{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","className","classes","descriptionBlock","src","photos","large","Preloader","Post","item","autor","message","likesCount","MyPosts","memo","postsElements","posts","map","post","id","postsBlock","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","AddNewPostForm","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","reduxForm","form","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.e783dc83.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>;\r\n            return  <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3FLst\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BQvk\",\"posts\":\"MyPosts_posts__3qXmg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__111i7\"};","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nclass ProfileStatus extends React.Component {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    };\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true\r\n        })\r\n    };\r\n\r\n    deactivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false\r\n        });\r\n        this.props.updateStatus(this.state.status);\r\n    };\r\n\r\n    onStatusChange = (e) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    };\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.status !== this.props.status){\r\n            this.setState({status: this.props.status})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {!this.state.editMode\r\n                    ?\r\n                        <div>\r\n                            <span onDoubleClick={this.activateEditMode}>{this.props.status || \"----\"}</span>\r\n                        </div>\r\n                    :\r\n                        <div>\r\n                            <input\r\n                                onChange={this.onStatusChange}\r\n                                onBlur={this.deactivateEditMode}\r\n                                value={this.state.status}\r\n                                autoFocus={true}\r\n                            />\r\n                        </div>\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React, {useState, useEffect} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {setStatus(props.status)}, [props.status]); // как только изменятся пропсы сработает юзэффектб то есть мы зависим от статуса который придет в пропсах\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                    autoFocus={true}\r\n                />\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatus from './ProfileStatus'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos.large}/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return <div className={classes.item}>\r\n        <span>{props.autor}</span>\r\n        <img src='https://sumopaint.com/images/icon.png'/>\r\n        {props.message}\r\n        <div>\r\n            <span>like</span>\r\n            {props.likesCount}\r\n        </div>\r\n    </div>\r\n\r\n};\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postsElements = props.posts.map(post => <Post message={post.message}\r\n                                                      likesCount={post.likesCount}\r\n                                                      autor={post.autor}\r\n                                                      id={post.id}/>);\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return <div className={classes.postsBlock}>\r\n        <h3>my Posts</h3>\r\n\r\n        <AddNewPostForm onSubmit={onAddPost}/>\r\n\r\n        <div className={classes.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    placeholder={\"Post message\"}\r\n                    validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nAddNewPostForm = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n    <div>\r\n        <ProfileInfo profile={props.profile}\r\n                     status={props.status}\r\n                     updateStatus={props.updateStatus}\r\n        />\r\n        <MyPostsContainer />\r\n    </div>\r\n    );\r\n};\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;        // как то зарефакторил но неправильно скорее всего\r\n            if(!userId) {                               // У димыча эта ХУЙНЯ работаетб а у меня вылетает какой то пиздец дикий\r\n                this.props.history.push(\"/login\");     // хуй пойми какая то поебень ненужная блять\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    {...this.props}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,  // спросить и проверить какой айди\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}