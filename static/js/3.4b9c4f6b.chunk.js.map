{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileInfo","profile","isOwner","savePhoto","Preloader","className","classes","descriptionBlock","src","photos","large","userPhoto","mainPhoto","type","target","files","length","Post","item","autor","message","likesCount","MyPosts","memo","postsElements","posts","map","post","id","postsBlock","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","AddNewPostForm","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","reduxForm","form","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/3.4b9c4f6b.chunk.js","sourcesContent":["import React from \"react\"\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) return <Redirect to='/login'/>;\r\n            return  <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3FLst\",\"mainPhoto\":\"ProfileInfo_mainPhoto__71dzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2BQvk\",\"posts\":\"MyPosts_posts__3qXmg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__111i7\"};","import React, {useState, useEffect} from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {setStatus(props.status)}, [props.status]); // как только изменятся пропсы сработает юзэффектб то есть мы зависим от статуса который придет в пропсах\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    };\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    };\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || \"----\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input\r\n                    onBlur={deactivateEditMode}\r\n                    onChange={onStatusChange}\r\n                    value={status}\r\n                    autoFocus={true}\r\n                />\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport classes from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"./../../../assets/images/user.jpg\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto}) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const mainPhotoSelected = (e) => {\r\n        if (e.target.files.length){\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.descriptionBlock}>\r\n                <img src={profile.photos.large || userPhoto} className={classes.mainPhoto}/>\r\n                {isOwner && <input type={'file'} onChange={mainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return <div className={classes.item}>\r\n        <span>{props.autor}</span>\r\n        <img src='https://sumopaint.com/images/icon.png'/>\r\n        {props.message}\r\n        <div>\r\n            <span>like</span>\r\n            {props.likesCount}\r\n        </div>\r\n    </div>\r\n\r\n};\r\nexport default Post;","import React from 'react';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    let postsElements = props.posts.map(post => <Post message={post.message}\r\n                                                      likesCount={post.likesCount}\r\n                                                      autor={post.autor}\r\n                                                      id={post.id}/>);\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n    return <div className={classes.postsBlock}>\r\n        <h3>my Posts</h3>\r\n\r\n        <AddNewPostForm onSubmit={onAddPost}/>\r\n\r\n        <div className={classes.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>\r\n});\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"newPostText\"\r\n                    component={Textarea}\r\n                    placeholder={\"Post message\"}\r\n                    validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nAddNewPostForm = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                isOwner = {props.isOwner}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,  // спросить и проверить какой айди\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer);"],"sourceRoot":""}